package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"gateway/pkg/core"
	"gateway/pkg/graph/model"
	"log"
	"net/http"
	searchpb "search/gen/protos"
	"time"

	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (bool, error) {
	err := core.CreateUser(r.DB, input.Name, input.Email, input.Password)
	if err != nil {
		return false, gqlerror.Errorf(err.Error())
	}

	return true, nil
}

// AuthenticateUser is the resolver for the authenticateUser field.
func (r *mutationResolver) AuthenticateUser(ctx context.Context, input model.AuthenticatedUserInput) (string, error) {
	usr, err := core.AuthenticateUser(r.DB, input.Email, input.Password)
	if err != nil {
		return "", gqlerror.Errorf(err.Error())
	}

	token, err := core.CreateToken(usr)
	if err != nil {
		return "", gqlerror.Errorf(err.Error())
	}

	cookie := &http.Cookie{Name: "Authorization", Value: token, Path: "/", HttpOnly: true, Expires: time.Now().Add(24 * time.Hour)}
	writer, ok := ctx.Value(core.HttpWriterKey).(http.ResponseWriter)
	if !ok {
		log.Println("error getting http writer", writer, ok)
		return "", gqlerror.Errorf("error getting http writer")
	}

	http.SetCookie(writer, cookie)

	return usr.Name, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (bool, error) {
	usr := core.GetUserFromContext(ctx)
	if usr == nil {
		return false, gqlerror.Errorf("error getting user id")
	}

	if err := core.UpdateUser(r.DB, usr, input.Name, input.Email, input.Password); err != nil {
		return false, gqlerror.Errorf(err.Error())
	}

	return true, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	usr := core.GetUserFromContext(ctx)
	if usr == nil {
		return false, gqlerror.Errorf("error getting user id")
	}

	if err := core.DeleteUser(r.DB, usr); err != nil {
		return false, gqlerror.Errorf(err.Error())
	}

	cookie := &http.Cookie{Name: "Authorization", Value: "", Path: "/", HttpOnly: true, Expires: time.Now().Add(-time.Hour)}
	writer, ok := ctx.Value(core.HttpWriterKey).(http.ResponseWriter)
	if !ok {
		log.Println("error getting http writer", writer, ok)
		return false, gqlerror.Errorf("error getting http writer")
	}

	http.SetCookie(writer, cookie)

	return true, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.CreateCategoryInput) (bool, error) {
	_, err := r.SearchClient.CreateCategory(ctx, &searchpb.CreateCategoryRequest{
		Name:     input.Name,
		Slug:     input.Slug,
		ParentId: input.Parent,
	})

	if err != nil {
		return false, gqlerror.Errorf(err.Error())
	}

	return true, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, input model.UpdateCategoryInput) (bool, error) {
	_, err := r.SearchClient.UpdateCategory(ctx, &searchpb.UpdateCategoryRequest{
		Name:     input.Name,
		Slug:     input.Slug,
		ParentId: input.Parent,
	})

	if err != nil {
		return false, gqlerror.Errorf(err.Error())
	}

	return true, nil
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	_, err := r.SearchClient.DeleteCategory(ctx, &searchpb.DeleteCategoryRequest{
		Id: id,
	})

	if err != nil {
		return false, gqlerror.Errorf(err.Error())
	}

	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, term *string) ([]*model.User, error) {
	users, err := core.SearchUsers(r.DB, term)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return core.MapUsers(users), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	usr, err := core.GetUser(r.DB, id)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return core.MapUser(usr), nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	usr := core.GetUserFromContext(ctx)
	if usr == nil {
		return nil, gqlerror.Errorf("error getting user id")
	}

	return core.MapUser(usr), nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.SearchClient.FetchCategories(ctx, &searchpb.Empty{})
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	result := make([]*model.Category, len(categories.Categories))
	for i, category := range categories.Categories {
		result[i] = &model.Category{
			ID:   category.Id,
			Name: category.Name,
			Slug: category.Slug,
			// ParentID: category.ParentId,
		}
	}

	return result, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	cat, err := r.SearchClient.GetCategory(ctx, &searchpb.GetCategoryRequest{Id: id})

	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return &model.Category{
		ID:   cat.Id,
		Name: cat.Name,
		Slug: cat.Slug,
		// ParentID: cat.ParentId,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
